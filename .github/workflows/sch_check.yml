# Unique name for this workflow
name: 'Quality gate & check deployment'

# Variables de ejecución
env:
  PACKAGE_DIR: package.xml
  TEST_LEVEL: RunLocalTests
  AUTO_FOLDER: './paqueteDelta'

# Cuando se lanza el workflow
on:
    pull_request:
        types: [review_requested]
        branches:
          - master
          - uat
          - develop

# Jobs to be executed
jobs:

    changedfiles:
      runs-on: ubuntu-latest
      # Map a step output to a job output
      outputs:
        pmd: ${{ steps.changes.outputs.pmd}}
        prettier: ${{ steps.changes.outputs.prettier }}
        aura: ${{ steps.changes.outputs.aura }}
        lwc: ${{ steps.changes.outputs.lwc }}
      steps:
          # Make sure we have some code to diff.
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
                fetch-depth: 0

        - name: Get-changed-files
          id: changes
          # Set outputs using the command.
          run: |
              echo "::set-output name=pmd::$(git diff --raw --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '.*\.cls|.*\.trigger|.*\.page' | awk '{ print "\""$0"\"" }' | tr '\n' ',')"
              echo "::set-output name=prettier::$(git diff --raw --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '.*\.cls|.*\.cmp|.*\.component|.*\.css|.*\.html|.*\.js|.*\.json|.*\.md|.*\.page|.*\.trigger|.*\.xml|.*\.yaml|.*\.yml' | awk '{ print "\""$0"\"" }'  | tr '\n' ' ')"
              echo "::set-output name=aura::$(git diff --raw --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '.*/aura/.* | awk '{ print "\""$0"\"" }' | tr '\n' ' ')"
              echo "::set-output name=lwc::$(git diff --raw --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '.*/lwc/.* | awk '{ print "\""$0"\"" }' | tr '\n' ' ')"
    PMD:
        runs-on: ubuntu-latest
        needs: changedfiles
        if: ${{needs.changedfiles.outputs.pmd}}
        steps:

            # checkout this repo
            - name: 'Checkout Repo'
              uses: actions/checkout@v2
              with:
                ref: ${{ github.event.pull_request.head.ref }}

             # checkout this repo
            - name: 'Instala Salesforce CLI'
              run: |
                  if ! command -v sfdx &> /dev/null; then
                    wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz -q
                    mkdir ~/sfdx
                    tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1 > /dev/null
                    echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                    ~/sfdx/bin/sfdx version
                  else
                    command -v sfdx
                    sfdx --version
                  fi

            # Install Salesforce Scanner
            - name: 'Install Salesforce Scanner'
              run: sfdx plugins:install @salesforce/sfdx-scanner

             # PMD
            - name: 'PMD'
              run: sfdx scanner:run --target ${{needs.changedfiles.outputs.pmd}} --engine pmd --pmdconfig ./ApexPMD/PMDRulesXML.xml --severity-threshold 1
    Linter:
        runs-on: ubuntu-latest
        needs: changedfiles
        if: ${{needs.changedfiles.outputs.prettier}}
        steps:

            # checkout this repo
            - name: 'Checkout Repo'
              uses: actions/checkout@v2
            
            # Cache node_modules to speed up the process
            - name: 'Restore node_modules cache'
              id: cache-npm
              uses: actions/cache@v1
              with:
                  path: node_modules
                  key: npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      npm-${{ env.cache-name }}-
                      npm-
                    
            # Install npm dependencies for Prettier and Jest
            - name: 'Install npm dependencies'
              if: steps.cache-npm.outputs.cache-hit != 'true'
              run: npm ci

            # Prettier
            #- name: 'Verificando Prettier'
            #  run: npm run prettierCI --list-different ${{needs.changedfiles.outputs.prettier}}       

            # Lint LWC
            - name: 'Lint Lightning Web Components'
              if: ${{needs.changedfiles.outputs.lwc}}
              run: npm run lint:lwc:CI ${{needs.changedfiles.outputs.lwc}}

            # Lint Aura
            - name: 'Lint Lightning Aura Components'
              if: ${{needs.changedfiles.outputs.aura}}
              run: npm run lint:aura:CI ${{needs.changedfiles.outputs.aura}}

            # LWC unit tests
            #- name: 'Test unitarios Jest'
            #  run: npm run test:unit

    run-check-deploy:
        runs-on: ubuntu-latest
        steps:

          # checkout this repo
            - name: 'Checkout Repo'
              uses: actions/checkout@v2
              with:
                ref: ${{ github.event.pull_request.head.ref }}


            # checkout this repo
            - name: 'Instala Salesforce CLI'
              run: |
                  if ! command -v sfdx &> /dev/null; then
                    wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz -q
                    mkdir ~/sfdx
                    tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1 > /dev/null
                    echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                    ~/sfdx/bin/sfdx version
                  else
                    command -v sfdx
                    sfdx --version
                  fi

            #Descarga JQ para el manejo de JSON
            - name: 'Descarga jq'
              run: |
                if ! command -v jq &> /dev/null; then
                  sudo apt-get install jq
                fi

            # Guarda la URL del entorno
            - name: Setea dinámicamente la URL
              id: auth_url_secret_name
              run: echo "##[set-output name=name;]$(echo ${GITHUB_BASE_REF^^})_AUTH_URL"
              
            - name: Genera un archivo con la URL
              run: echo ${{ secrets[steps.auth_url_secret_name.outputs.name] }} > ./SF_URL.txt

            # Autenticarse en el entorno
            - name: 'Autenticacion en SF'
              run: sfdx auth:sfdxurl:store -f ./SF_URL.txt -a env

            # Autenticarse en el entorno
            - name: 'Set Git username & email'
              run: |
                git config --global user.name "Release Management";
                git config --global user.email "arquitectura@leadclic.com";

            # Lanza los test
            - name: Run tests in the scratch org
              run: 'sfdx force:apex:test:run -u env --resultformat human -w 25 -y'

            # Instala Salesforce CLI Scanner  & check deploy
            - name: 'Instala Salesforce CLI Scanner & check deploy'
              id: check_deploy_json
              run: |
                echo 'y' | sfdx plugins:install sfdx-git-delta
                cd $GITHUB_WORKSPACE
                rm -rf ${{ env.AUTO_FOLDER }}
                mkdir ${{ env.AUTO_FOLDER }}
                git fetch
                sfdx sgd:source:delta --to $GITHUB_HEAD_REF --from origin/$GITHUB_BASE_REF --output ${{ env.AUTO_FOLDER }} -s force-app/main/default
                git add ${{ env.AUTO_FOLDER }}
                git diff-index --quiet HEAD || git commit -m 'Carpeta Delta REVISAR'
                git push
                sfdx force:source:deploy -x ${{ env.AUTO_FOLDER }}/package/package.xml -u env -c -l ${{ env.TEST_LEVEL }} --json >./log.json || cat ./log.json


            # Control errores
            - name: 'Sale del proceso o guarda Id ejecución'
              run: |
                tempVar=$(jq '.status' ./log.json)
                if [ $tempVar = '0' ]; then
                  jq -r '.result.id' ./log.json > ./executionId.txt
                  cat ./executionId.txt
                else
                  jq '.result.details.componentFailures' ./log.json > ./error.txt
                  cat ./error.txt
                  exit 1
                fi
                
            # Commit cambios y push
            #- name: 'Commit y push de cambios'
            #  run: |
            #    git add ./executionId.txt;
            #    git diff-index --quiet HEAD || git commit -m 'Código de ejecución para despliegue rápido';
            #    git push

    run-if-fail:
      if: failure()
      needs: [PMD, Linter, run-check-deploy]
      runs-on: ubuntu-latest
      steps:

        - name: Get requested review id
          id: pr_req_reviews
          if: ${{ steps.check_deploy.outcome != 'success' }}
          uses: octokit/request-action@v2.x
          with:
            route: GET /repos/${{ github.repository }}/pulls/${{ github.event.number }}/requested_reviewers
          env:
            GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}

        - name: Extract reviewer login
          id: get_reviewer_loggin
          run: echo "##[set-output name=login;]$(echo [${{ fromJSON(steps.pr_req_reviews.outputs.data).users[0].login }}])"

        - name: Dismiss review request if check failed
          if: ${{ steps.check_deploy.outcome != 'success' }}
          uses: octokit/request-action@v2.x
          with:
            route: DELETE /repos/${{ github.repository }}/pulls/${{ github.event.number }}/requested_reviewers
            reviewers: ${{ steps.get_reviewer_loggin.outputs.login }}
          env:
            GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}